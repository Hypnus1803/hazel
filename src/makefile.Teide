# makefile for Hazel

# Choose MPI or serial version (VERSION=MPI/SERIAL/PYTHON)
VERSION = MPI

# Choose desired compiler (FORTRAN_COMPILER=gfortran / FORTRAN_COMPILER=ifort)
FORTRAN_COMPILER = ifort

#******************
# NET-CDF
#******************
# If nf-config exists in your path
# NETCDF_INCLUDE = $(shell nf-config --fflags)
# NETCDF_LIB = $(shell nf-config --flibs)

# Otherwise, hardwire the path to the include files
NETCDF_INCLUDE = /opt/envhpc/netcdf/4.3.2/intelmpi/include
NETCDF_LIB = /opt/envhpc/netcdf/4.3.2/intelmpi/lib

#******************
# COMPILER
#******************
# In my desktop computer
ifeq ($(VERSION), MPI)
    COMPILER = mpiifort
    ifeq ($(FORTRAN_COMPILER), gfortran)
        COMPILER_OPTS = 
    else
        COMPILER_OPTS = -c -O3 -ipo -xAVX
    endif
    HAZEL_DEP = hazel.f90 allen.o synth.o rt_coef.o SEE.o maths.o vars.o mpi_routines.o inversion.o io.o
endif
ifeq ($(VERSION), SERIAL)
    ifeq ($(FORTRAN_COMPILER), gfortran)
        COMPILER_OPTS = -c -O3 -ffree-line-length-none
    else
        COMPILER = ifort 
        COMPILER_OPTS = -c -O3
    endif
    HAZEL_DEP = hazel.f90 allen.o synth.o rt_coef.o SEE.o maths.o vars.o mpi_routines_fake.o inversion.o io.o
endif


#******************
# Hazel
#******************
LIBS =  -L$(NETCDF_LIB) -lnetcdff
FINAL_EXECUTABLE = hazel

ifeq ($(VERSION), MPI)
    OBJECTS = vars.o maths.o allen.o svd.o io.o SEE.o rt_coef.o synth.o marquardt.o hazel.o DIRect.o \
        DIRserial.o DIRsubrout.o singleton.o mpi_routines.o inversion.o
else
    OBJECTS = vars.o maths.o allen.o svd.o io.o SEE.o rt_coef.o synth.o marquardt.o hazel.o DIRect.o \
        DIRserial.o DIRsubrout.o singleton.o mpi_routines_fake.o inversion.o
endif

    
hazel: $(OBJECTS)   
    $(COMPILER) $(COMPILER_LINKS) $(OBJECTS) $(LIBS) -I$(NETCDF_INCLUDE) -o $(FINAL_EXECUTABLE)
    cp $(FINAL_EXECUTABLE) ../RunMPI
    cp $(FINAL_EXECUTABLE) ../Run
    cp $(FINAL_EXECUTABLE) ../Widget_Synth

all:
    make hazel
        
clean: 
    find . -maxdepth 2 -name "*.o" -delete ; find . -maxdepth 1 -name "*.mod" -delete ;
    find . -maxdepth 1 -name "*.f90~" -delete ; find . -maxdepth 2 -name "*.a" -delete ;
    find . -maxdepth 1 -name "phazel" -delete
    find ../ -maxdepth 2 -name "phazel" -delete
    
vars.o: vars.f90
    $(COMPILER) $(COMPILER_OPTS)  vars.f90

maths.o: maths.f90 vars.o singleton.o
    $(COMPILER) $(COMPILER_OPTS)  maths.f90

allen.o: allen.f90 maths.o vars.o
    $(COMPILER) $(COMPILER_OPTS)  allen.f90
    
svd.o: svd.f90
    $(COMPILER) $(COMPILER_OPTS)  svd.f90

io.o: io.f90 maths.o vars.o
    $(COMPILER) $(COMPILER_OPTS) -I$(NETCDF_INCLUDE) io.f90

SEE.o: SEE.f90 allen.o maths.o vars.o
    $(COMPILER) $(COMPILER_OPTS)  SEE.f90

rt_coef.o: rt_coef.f90 vars.o maths.o
    $(COMPILER) $(COMPILER_OPTS)  rt_coef.f90

synth.o: synth.f90 rt_coef.o SEE.o vars.o
    $(COMPILER) $(COMPILER_OPTS)  synth.f90

marquardt.o: marquardt.f90 maths.o svd.o synth.o rt_coef.o SEE.o vars.o
    $(COMPILER) $(COMPILER_OPTS) -I$(NETCDF_INCLUDE) marquardt.f90
    
DIRect.o: DIRect.f90
    $(COMPILER) $(COMPILER_OPTS)  DIRect.f90
    
DIRserial.o: DIRserial.f90
    $(COMPILER) $(COMPILER_OPTS)  DIRserial.f90
    
DIRsubrout.o: DIRsubrout.f90
    $(COMPILER) $(COMPILER_OPTS)  DIRsubrout.f90

singleton.o: singleton.f90
    $(COMPILER) $(COMPILER_OPTS)  singleton.f90

mpi_routines.o: mpi_routines.f90
    $(COMPILER) $(COMPILER_OPTS) mpi_routines.f90

mpi_routines_fake.o: mpi_routines_fake.f90
    $(COMPILER) $(COMPILER_OPTS) mpi_routines_fake.f90

inversion.o: inversion.f90 marquardt.o
    $(COMPILER) $(COMPILER_OPTS) -I$(NETCDF_INCLUDE) inversion.f90
    
hazel.o: $(HAZEL_DEP)
    $(COMPILER) $(COMPILER_OPTS) -I$(NETCDF_INCLUDE) -D$(VERSION) -fpp hazel.f90
